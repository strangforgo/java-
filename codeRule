(一)命名风格
1.代码中的命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束
2.代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式
3.类名使用UpperCamelCase风格
4.方法名/参数名/成员变量/局部变量都统一使用lowerCamelCase风格，必须遵循驼峰形式
5.常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌弃名字长
6.抽象类命名使用Abstract或Base开头；异常类命名使用Exception结尾；测试类命名以它要测试的类的名称开始，以Test结尾
7.类型与中括号紧挨相连表示数组
8.POJO类中布尔型的变量，都不要加is前缀，否则部分框架解析会引起序列化错误
9.包名统一使用小写，点分割符之间有且仅有一个自然语义的英文单词，包名统一使用单数形式，但是类名如果有复数含义，类名可以使用复数形式。
10.杜绝完全不规范的缩写，避免望文不知义
11.为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意
12.如果模块/接口/类/方法使用了设计模式，在命名时需体现出具体模式
13.接口类中的方法和属性不要加任何修饰符号（public也不要加），保持代码的简洁性，并加上有效的JavaDoc注释。尽量不要在接口里定义变量，如果一定要定义变量
肯定是与接口方法相关，并且是整个应用的基础常量
14.接口和实现类的命名有两套规则：
对于Service和Dao类，基于SOA的理念，暴露出来的服务一定是接口，内部的实现类用Impl的后缀与接口区别
如果是形容能力的接口名称，取对应的形容词为接口名（通常是-able的形式）
15.枚举类名建议带上Enum后缀，枚举成员名称需要全大写，单词间用下划线隔开
16.各层命名规约
A)Service/DAO层方法命名规约
1)获取单个对象的方法用get做前缀
2)获取多个对象的方法用list做前缀，复数形式结尾；//个人觉得这个不是很好，应该还是用get开头，用list结尾
3)获取统计值的方法用count做前缀
4)插入的方法用save/insert做前缀
5)删除的方法用remove/delete做前缀
6)修改的方法用update做前缀
B)领域模型命名规约
1）数据对象：
2)数据传输对象
3）展示对象
4）POJO是DO/DTO/BO/VO的统称，禁止命名成xxxPOJO

(二)常量定义
1.不允许任何魔法值（即未经预先定义的常量）直接出现在代码中。
2.在long或者Long赋值时，数值后使用大写的L，不能是小写的l
3.不要使用一个常量类维护所有常量，要按常量功能进行归类，分开维护
4.常量的复用层次有五层：跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。 
1） 跨应用共享常量：放置在二方库中，通常是client.jar中的constant目录下。 
2） 应用内共享常量：放置在一方库中，通常是子模块中的constant目录下。
3） 子工程内部共享常量：即在当前子工程的constant目录下。 
4） 包内共享常量：即在当前包下单独的constant目录下。 
5） 类内共享常量：直接在类内部private static final定义。
5.如果变量值仅在一个固定范围内变化用enum类型来定义
（三）代码格式
1.大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行；如果是非空代码块则： 
1） 左大括号前不换行。 
2） 左大括号后换行。 
3） 右大括号前换行。 
4） 右大括号后还有else等代码则不换行；表示终止的右大括号后必须换行。
2.左小括号和字符之间不出现空格；同样，右小括号和字符之间也不出现空格；而左大括号前需要空格。
3.if/for/while/switch/do等保留字与括号之间都必须加空格。
4.任何二目/三目运算符的左右两边都需要加一个空格
public static void main(String[] args) {
// 缩进4个空格
String say = "hello";
// 运算符的左右必须有一个空格
int flag = 0;
// 关键词if与括号之间必须有一个空格，括号内的f与左括号，0与右括号不需要空格
if (flag == 0) {
System.out.println(say);
}
// 左大括号前加空格且不换行；左大括号后换行
if (flag == 1) {
System.out.println("world");
// 右大括号前换行，右大括号后有else，不用换行
} else {
System.out.println("ok");
// 在右大括号后直接结束，则必须换行
}
} 
6.注释的双斜线与注释内容之间有且仅有一个空格
单行字符数限不超过 120 个，超出需要换行时 个，超出需要换行时 遵循如下原则： 
1） 第二行相对一缩进 4个空格，从第三行开始不再继续缩进参考示例。 
2） 运算符与下文一起换行。 
3） 方法调用的点符号与下文一起换行。 
4） 方法调用中的多个参数需要换行时，在逗号后进行。 
5） 在括号前不要换行，见反例。
8.方法参数在定义和传入时，多个参数逗号后边必须加空格
9.IDE的text file encoding设置为UTF-8; IDE中文件的换行符使用Unix格式，不要使用Windows格式。
10.【推荐】单个方法的总行数不超过 80 行。 说明： 包括方法签名、结束右大号内代码注释空行回车及任何不可见字符的总 包括方法签名、结束右大号内代码注释空行回车及任何不可见字符的总 包括方法签名、结束右大号内代码注释空行回车及任何不可见字符的总 包括方法签名、结束右大号内代码注释空行回车及任何不可见字符的总 包括方法签名、结束右大号内代码注释空行回车及任何不可见字符的总 包括方法签名、结束右大号内代码注释空行回车及任何不可见字符的总 行数不超过 80 行。
正例：代码逻辑分清红花和绿叶，个性和共性，绿叶逻辑单独出来成为额外方法，使主干代码更加清晰；共性逻辑抽取成为共性方法，便于复用和维护。

(四)OOP规约
这个不是很熟悉，需要进一步的积累
1.Object的equals方法容易抛空指针异常，应使用常量或确定有值的对象来调用equals。














